name: Build, Lint, and Test

# This workflow
#  - builds the code
#  - runs the unit tests
#  - runs the linter
#  - reports the code coverage and linting errors to Sonar

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group: # run if triggered as part of a merge queue
  schedule:
    # this is checking periodically if there are any breaking API changes
    # Every day at 00:00
    - cron: '0 0 * * *'

defaults:
  run:
    shell: bash

jobs:
  build_test:
    name: Build and Test
    permissions:
      contents: read
      checks: write
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: üõ†Ô∏è Set up Go 1.x
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b #v5.4.0
        with:
          go-version-file: go.mod

      - name: üèóÔ∏è Compile
        run: make compile

      - name: üöÄ Binary starts
        run: go run ./cmd/monaco

      - name: üõ†Ô∏è Generate mocks
        run: make mocks

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@3f7ff0ec4aeb6f95f5d67c998b71f272aa8a8b41 #v1.12.1

      - name: üß™ Unit test with coverage
        # the coverage name has to match the one specified in "sonar-project.properties" and in the upload artifact step
        run: gotestsum --format testdox --format-icons hivis -- -coverprofile=cov.out -tags=unit -v -race ./...

      - name: ‚¨ÜÔ∏è Archive code coverage results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: code-coverage-report
          path: cov.out

  lint:
    name: Run Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - name: ‚¨áÔ∏è Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: üõ†Ô∏è Set up Go 1.x
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b #v5.4.0
        with:
          go-version-file: go.mod

      - name: ‚úçÔ∏è Check format
        run: make lint

      - name: üïµÔ∏è Go vet
        run: make vet

      - name: üîé golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 #v8.0.0
        with:
          install-mode: 'goinstall' # install mode goinstall in order to use hashes for the version
          version: eabc2638a66daf5bb6c6fb052a32fa3ef7b6600d #v2.1.6
          args: '--output.checkstyle.path=lint-report.xml'

      - name: ‚¨ÜÔ∏è Archive lint results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: lint-report
          path: lint-report.xml

  sonar_scan:
    name: Report lint and test coverage
    if: ${{ always() }} # always runs after lint and test have completed, regardless of whether they were successful
    needs: [build_test, lint]
    permissions:
      contents: read
      checks: write
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: ‚¨áÔ∏è Download coverage artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 #v4.3.0
        with:
          name: code-coverage-report

      - name: ‚¨áÔ∏è Download lint artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 #v4.3.0
        with:
          name: lint-report

      - name: üè∑Ô∏è Get latest tag
        id: get_latest_tag
        run: |
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: üîç SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf # nosemgrep false detection of commit v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.projectVersion=${{steps.get_latest_tag.outputs.GIT_TAG}}
