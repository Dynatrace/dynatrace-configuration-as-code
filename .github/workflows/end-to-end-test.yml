name: E2E Test

# This workflow executes end-to-end tests and verifies that the binaries are buildable
# The workflow is executed on latest main commits, pull requests which are labeled 'run-e2e-test', and nightly.

on:
  push:
    branches: [ main ]
  schedule:
  - cron: '0 0 * * *' # nightly build ensure E2E tests run daily and catch any breaking API changes
  pull_request_target:
    types: [ labeled ]

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup variables
    if: github.repository == 'Dynatrace/dynatrace-configuration-as-code'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      sha: ${{ steps.write.outputs.sha }} # sha contains the correct sha for followup jobs to use

    steps:
    - name: Fetch base repo sha
      if: github.event.action == 'labeled' && github.event.label.name == 'run-e2e-test'
      run: echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

    - name: Fetch event sha
      if: github.event.action != 'labeled'
      run: echo "sha=$GITHUB_SHA" >> $GITHUB_ENV

    - id: write
      name: Store sha
      run: echo "sha=$sha" >> $GITHUB_OUTPUT


  release-binaries:
    name:  üèÅ Build release binaries
    needs: [setup]
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
    - name: Checkout
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
      with:
        ref: ${{needs.setup.outputs.sha}}

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üèÅ Build release binaries
      run: make build-release


  integration-test:
    name: üåé Integration tests
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
      with:
        ref: ${{needs.setup.outputs.sha}}

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üåé Integration test
      run: make integration-test testopts="--junitfile test-result-integration.xml"
      env:
        URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
        URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
        TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
        TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
        PLATFORM_URL_ENVIRONMENT_1: ${{ secrets.PLATFORM_URL_ENVIRONMENT_1 }}
        PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

    - name: ‚¨ÜÔ∏è Upload Test Results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      if: always()
      with:
        name: Test Results - Integration
        path: test-result-*.xml


  legacy-integration-tests:
    name: üßì Legacy integration tests
    needs: [setup]
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
      with:
        ref: ${{needs.setup.outputs.sha}}

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üßì Integration test (legacy)
      run: make integration-test-v1 testopts="--junitfile test-result-integration-legacy.xml"
      env:
        URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
        URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
        TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
        TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
        PLATFORM_URL_ENVIRONMENT_1: ${{ secrets.PLATFORM_URL_ENVIRONMENT_1 }}
        PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

    - name: ‚¨ÜÔ∏è Upload Test Results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      if: always()
      with:
        name: Test Results - Integration Legacy
        path: test-result-*.xml


  download-restore-test:
    name: üì•/üì§ Download-restore-test
    needs: [setup]
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
      with:
        ref: ${{needs.setup.outputs.sha}}

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üì•/üì§ Download/Restore test
      run: make download-restore-test testopts="--junitfile test-result-integration-download-restore.xml"
      env:
        URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
        URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
        TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
        TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
        PLATFORM_URL_ENVIRONMENT_1: ${{ secrets.PLATFORM_URL_ENVIRONMENT_1 }}
        PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

    - name: ‚¨ÜÔ∏è Upload Test Results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      if: always()
      with:
        name: Test Results - Integration Download
        path: test-result-*.xml

  account-management-test:
    name: üóÇÔ∏è Account Management E2E tests
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
        with:
          ref: ${{needs.setup.outputs.sha}}

      - name: Set up Go 1.x
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
        with:
          go-version: '~1.22'

      - name: üóÇÔ∏è Account Management E2E tests
        run: make account-management-test testopts="--junitfile test-result-aim.xml"
        env:
          ACCOUNT_UUID: ${{ secrets.ACCOUNT_UUID }}
          ACCOUNT_OAUTH_CLIENT_ID: ${{ secrets.ACCOUNT_OAUTH_CLIENT_ID }}
          ACCOUNT_OAUTH_CLIENT_SECRET: ${{ secrets.ACCOUNT_OAUTH_CLIENT_SECRET }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
          PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

      - name: ‚¨ÜÔ∏è Upload Test Results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        if: always()
        with:
          name: Test Results - Account Management
          path: test-result-*.xml

  windows-unit-tests:
    name: ü™ü Windows tests
    needs: [ setup ]
    if: github.event.action != 'labeled' || github.event.label.name == 'run-e2e-test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2
      with:
        ref: ${{needs.setup.outputs.sha}}

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üß™ Unit test
      run: make test testopts="--junitfile test-result-windows-latest-unit.xml"

    - name: ‚¨ÜÔ∏è Upload Test Results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      if: always()
      with:
        name: Test Results - Unit Windows
        path: test-result-*.xml

  nightly-run:
    name: üåú Nightly test & üßπ Cleanup
    needs: [setup] # It does not need it strictly, but we filter based on the repository in the setup step
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
    - name: Check out base repo
      uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 #v4.1.2

    - name: Set up Go 1.x
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 #v5.0.0
      with:
        go-version: '~1.22'

    - name: üåú Nightly Tests
      run: make nightly-test testopts="--junitfile test-result-integration-nightly.xml"
      env:
        URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
        URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
        TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
        TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
        PLATFORM_URL_ENVIRONMENT_1: ${{ secrets.PLATFORM_URL_ENVIRONMENT_1 }}
        PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

    - name: üßπ Cleanup
      run: make clean-environments
      env:
        URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
        URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
        TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
        TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
        PLATFORM_URL_ENVIRONMENT_1: ${{ secrets.PLATFORM_URL_ENVIRONMENT_1 }}
        PLATFORM_URL_ENVIRONMENT_2: ${{ secrets.PLATFORM_URL_ENVIRONMENT_2 }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_TOKEN_ENDPOINT: ${{ secrets.OAUTH_TOKEN_ENDPOINT }}

    - name: ‚¨ÜÔ∏è Upload Test Results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      if: always()
      with:
        name: Test Results - Integration Nightly
        path: test-result-*.xml


  upload_event:
    name: "Upload Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      with:
        name: event_file
        path: ${{ github.event_path }}
