// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

package api

import (
	environment "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/environment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApi is a mock of Api interface
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockApi) EXPECT() *MockApiMockRecorder {
	return _m.recorder
}

// GetUrl mocks base method
func (_m *MockApi) GetUrl(environment environment.Environment) string {
	ret := _m.ctrl.Call(_m, "GetUrl", environment)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUrl indicates an expected call of GetUrl
func (_mr *MockApiMockRecorder) GetUrl(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUrl", reflect.TypeOf((*MockApi)(nil).GetUrl), arg0)
}

// GetUrlFromEnvironmentUrl mocks base method
func (_m *MockApi) GetUrlFromEnvironmentUrl(environmentUrl string) string {
	ret := _m.ctrl.Call(_m, "GetUrlFromEnvironmentUrl", environmentUrl)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUrlFromEnvironmentUrl indicates an expected call of GetUrlFromEnvironmentUrl
func (_mr *MockApiMockRecorder) GetUrlFromEnvironmentUrl(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUrlFromEnvironmentUrl", reflect.TypeOf((*MockApi)(nil).GetUrlFromEnvironmentUrl), arg0)
}

// GetId mocks base method
func (_m *MockApi) GetId() string {
	ret := _m.ctrl.Call(_m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (_mr *MockApiMockRecorder) GetId() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetId", reflect.TypeOf((*MockApi)(nil).GetId))
}

// GetApiPath mocks base method
func (_m *MockApi) GetApiPath() string {
	ret := _m.ctrl.Call(_m, "GetApiPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiPath indicates an expected call of GetApiPath
func (_mr *MockApiMockRecorder) GetApiPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetApiPath", reflect.TypeOf((*MockApi)(nil).GetApiPath))
}

// GetPropertyNameOfGetAllResponse mocks base method
func (_m *MockApi) GetPropertyNameOfGetAllResponse() string {
	ret := _m.ctrl.Call(_m, "GetPropertyNameOfGetAllResponse")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPropertyNameOfGetAllResponse indicates an expected call of GetPropertyNameOfGetAllResponse
func (_mr *MockApiMockRecorder) GetPropertyNameOfGetAllResponse() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPropertyNameOfGetAllResponse", reflect.TypeOf((*MockApi)(nil).GetPropertyNameOfGetAllResponse))
}

// IsStandardApi mocks base method
func (_m *MockApi) IsStandardApi() bool {
	ret := _m.ctrl.Call(_m, "IsStandardApi")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStandardApi indicates an expected call of IsStandardApi
func (_mr *MockApiMockRecorder) IsStandardApi() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsStandardApi", reflect.TypeOf((*MockApi)(nil).IsStandardApi))
}
