// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

package rest

import (
	. "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynatraceClient is a mock of DynatraceClient interface
type MockDynatraceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynatraceClientMockRecorder
}

// MockDynatraceClientMockRecorder is the mock recorder for MockDynatraceClient
type MockDynatraceClientMockRecorder struct {
	mock *MockDynatraceClient
}

// NewMockDynatraceClient creates a new mock instance
func NewMockDynatraceClient(ctrl *gomock.Controller) *MockDynatraceClient {
	mock := &MockDynatraceClient{ctrl: ctrl}
	mock.recorder = &MockDynatraceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDynatraceClient) EXPECT() *MockDynatraceClientMockRecorder {
	return _m.recorder
}

// List mocks base method
func (_m *MockDynatraceClient) List(a Api) ([]Value, error) {
	ret := _m.ctrl.Call(_m, "List", a)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockDynatraceClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockDynatraceClient)(nil).List), arg0)
}

// ReadByName mocks base method
func (_m *MockDynatraceClient) ReadByName(a Api, name string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReadByName", a, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByName indicates an expected call of ReadByName
func (_mr *MockDynatraceClientMockRecorder) ReadByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadByName", reflect.TypeOf((*MockDynatraceClient)(nil).ReadByName), arg0, arg1)
}

// ReadById mocks base method
func (_m *MockDynatraceClient) ReadById(a Api, name string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReadById", a, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadById indicates an expected call of ReadById
func (_mr *MockDynatraceClientMockRecorder) ReadById(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadById", reflect.TypeOf((*MockDynatraceClient)(nil).ReadById), arg0, arg1)
}

// UpsertByName mocks base method
func (_m *MockDynatraceClient) UpsertByName(a Api, name string, jsonEntity map[string]interface{}) (DynatraceEntity, error) {
	ret := _m.ctrl.Call(_m, "UpsertByName", a, name, jsonEntity)
	ret0, _ := ret[0].(DynatraceEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertByName indicates an expected call of UpsertByName
func (_mr *MockDynatraceClientMockRecorder) UpsertByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpsertByName", reflect.TypeOf((*MockDynatraceClient)(nil).UpsertByName), arg0, arg1, arg2)
}

// DeleteByName mocks base method
func (_m *MockDynatraceClient) DeleteByName(a Api, name string) error {
	ret := _m.ctrl.Call(_m, "DeleteByName", a, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName
func (_mr *MockDynatraceClientMockRecorder) DeleteByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteByName", reflect.TypeOf((*MockDynatraceClient)(nil).DeleteByName), arg0, arg1)
}

// ExistsByName mocks base method
func (_m *MockDynatraceClient) ExistsByName(a Api, name string) (bool, string, error) {
	ret := _m.ctrl.Call(_m, "ExistsByName", a, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExistsByName indicates an expected call of ExistsByName
func (_mr *MockDynatraceClientMockRecorder) ExistsByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExistsByName", reflect.TypeOf((*MockDynatraceClient)(nil).ExistsByName), arg0, arg1)
}
