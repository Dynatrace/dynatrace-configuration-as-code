// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package rest is a generated GoMock package.
package rest

import (
	. "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynatraceClient is a mock of DynatraceClient interface
type MockDynatraceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynatraceClientMockRecorder
}

// MockDynatraceClientMockRecorder is the mock recorder for MockDynatraceClient
type MockDynatraceClientMockRecorder struct {
	mock *MockDynatraceClient
}

// NewMockDynatraceClient creates a new mock instance
func NewMockDynatraceClient(ctrl *gomock.Controller) *MockDynatraceClient {
	mock := &MockDynatraceClient{ctrl: ctrl}
	mock.recorder = &MockDynatraceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynatraceClient) EXPECT() *MockDynatraceClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockDynatraceClient) List(a Api) ([]Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", a)
	ret0, _ := ret[0].([]Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDynatraceClientMockRecorder) List(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDynatraceClient)(nil).List), a)
}

// ReadByName mocks base method
func (m *MockDynatraceClient) ReadByName(a Api, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByName", a, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByName indicates an expected call of ReadByName
func (mr *MockDynatraceClientMockRecorder) ReadByName(a, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByName", reflect.TypeOf((*MockDynatraceClient)(nil).ReadByName), a, name)
}

// ReadById mocks base method
func (m *MockDynatraceClient) ReadById(a Api, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadById", a, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadById indicates an expected call of ReadById
func (mr *MockDynatraceClientMockRecorder) ReadById(a, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadById", reflect.TypeOf((*MockDynatraceClient)(nil).ReadById), a, name)
}

// UpsertByName mocks base method
func (m *MockDynatraceClient) UpsertByName(a Api, name, json string) (DynatraceEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByName", a, name, json)
	ret0, _ := ret[0].(DynatraceEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertByName indicates an expected call of UpsertByName
func (mr *MockDynatraceClientMockRecorder) UpsertByName(a, name, json interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByName", reflect.TypeOf((*MockDynatraceClient)(nil).UpsertByName), a, name, json)
}

// DeleteByName mocks base method
func (m *MockDynatraceClient) DeleteByName(a Api, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByName", a, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName
func (mr *MockDynatraceClientMockRecorder) DeleteByName(a, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByName", reflect.TypeOf((*MockDynatraceClient)(nil).DeleteByName), a, name)
}

// ExistsByName mocks base method
func (m *MockDynatraceClient) ExistsByName(a Api, name string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", a, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExistsByName indicates an expected call of ExistsByName
func (mr *MockDynatraceClientMockRecorder) ExistsByName(a, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*MockDynatraceClient)(nil).ExistsByName), a, name)
}
