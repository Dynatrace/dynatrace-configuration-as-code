// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/download/jsoncreator (interfaces: JSONCreator)

// Package mock_jsoncreator is a generated GoMock package.
package jsoncreator

import (
	api "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/api"
	rest "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/rest"
	files "github.com/dynatrace-oss/dynatrace-monitoring-as-code/pkg/util/files"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJSONCreator is a mock of JSONCreator interface
type MockJSONCreator struct {
	ctrl     *gomock.Controller
	recorder *MockJSONCreatorMockRecorder
}

// MockJSONCreatorMockRecorder is the mock recorder for MockJSONCreator
type MockJSONCreatorMockRecorder struct {
	mock *MockJSONCreator
}

// NewMockJSONCreator creates a new mock instance
func NewMockJSONCreator(ctrl *gomock.Controller) *MockJSONCreator {
	mock := &MockJSONCreator{ctrl: ctrl}
	mock.recorder = &MockJSONCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJSONCreator) EXPECT() *MockJSONCreatorMockRecorder {
	return m.recorder
}

// CreateJSONConfig mocks base method
func (m *MockJSONCreator) CreateJSONConfig(arg0 rest.DynatraceClient, arg1 api.Api, arg2 api.Value, arg3 files.FileCreator, arg4 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJSONConfig", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateJSONConfig indicates an expected call of CreateJSONConfig
func (mr *MockJSONCreatorMockRecorder) CreateJSONConfig(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJSONConfig", reflect.TypeOf((*MockJSONCreator)(nil).CreateJSONConfig), arg0, arg1, arg2, arg3, arg4)
}
