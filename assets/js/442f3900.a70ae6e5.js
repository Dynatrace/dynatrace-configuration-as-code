"use strict";(self.webpackChunkmonaco=self.webpackChunkmonaco||[]).push([[6970],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>m});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(o),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return o?t.createElement(f,a(a({ref:n},p),{},{components:o})):t.createElement(f,a({ref:n},p))}));function m(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},8046:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=o(7462),r=(o(7294),o(3905));const i={sidebar_position:1},a="Deploying Configuration to Dynatrace",l={unversionedId:"configuration/deploy_configuration",id:"version-1.5.3/configuration/deploy_configuration",title:"Deploying Configuration to Dynatrace",description:"Monaco allows for deploying a configuration or a set of configurations in the form of project(s). A project is a folder containing files that define configurations to be deployed to a environment or a group of environments. This is done by passing the --project flag (or -p for short).",source:"@site/versioned_docs/version-1.5.3/configuration/deploy_configuration.md",sourceDirName:"configuration",slug:"/configuration/deploy_configuration",permalink:"/dynatrace-monitoring-as-code/1.5.3/configuration/deploy_configuration",draft:!1,editUrl:"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code/edit/main/documentation/versioned_docs/version-1.5.3/configuration/deploy_configuration.md",tags:[],version:"1.5.3",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"version-1.5.3/tutorialSidebar",previous:{title:"Logging",permalink:"/dynatrace-monitoring-as-code/1.5.3/commands/Logging"},next:{title:"Environments file",permalink:"/dynatrace-monitoring-as-code/1.5.3/configuration/environments_file"}},s={},c=[{value:"Running The Tool",id:"running-the-tool",level:3},{value:"Running The Tool With A Proxy",id:"running-the-tool-with-a-proxy",level:3}],p={toc:c};function d(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploying-configuration-to-dynatrace"},"Deploying Configuration to Dynatrace"),(0,r.kt)("p",null,"Monaco allows for deploying a configuration or a set of configurations in the form of project(s). A project is a folder containing files that define configurations to be deployed to a environment or a group of environments. This is done by passing the --project flag (or -p for short)."),(0,r.kt)("h3",{id:"running-the-tool"},"Running The Tool"),(0,r.kt)("p",null,"Below you find a few samples on how to run the tool to deploy your configurations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="shell"',title:'"shell"'},'monaco -e=environments.yaml (deploy all projects in the current folder to all environments)\n\nmonaco -e=environments.yaml -p="project" projects-root-folder (deploy projects-root-folder/project and any projects in projects-root-folder it depends on to all environments)\n\nmonaco -e=environments.yaml -p="projectA, projectB" projects-root-folder (deploy projects-root-folder/projectA, projectB and dependencies to all environments)\n\nmonaco -e=environments.yaml -se dev (deploy all projects in the current folder to the "dev" environment defined in environments.yaml)\n')),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," contains additional sub-projects, then all projects are deployed recursively."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," depends on different projects under the same root, those are also deployed."),(0,r.kt)("p",null,"Multiple projects could be specified by ",(0,r.kt)("inlineCode",{parentName:"p"},'-p="projectA, projectB, projectC/subproject"')),(0,r.kt)("p",null,"To deploy configuration the tool will need a valid API Token(s) for the given environments defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"environment variables")," - you can define the name of that env var in the environments file."),(0,r.kt)("p",null,"To deploy to 1 specific environment within a ",(0,r.kt)("inlineCode",{parentName:"p"},"environments.yaml")," file, the ",(0,r.kt)("inlineCode",{parentName:"p"},"-specific-environment")," or -se flag can be passed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="shell"',title:'"shell"'},'monaco -e=environments.yaml -se=my-environment -p="my-environment" cluster\n')),(0,r.kt)("h3",{id:"running-the-tool-with-a-proxy"},"Running The Tool With A Proxy"),(0,r.kt)("p",null,"In environments where access to Dynatrace API endpoints is only possible or allowed via a proxy server, monaco provides the options to specify the address of your proxy server when running a command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="shell"',title:'"shell"'},'HTTPS_PROXY=localhost:5000 monaco -e=environments.yaml -se=my-environment -p="my-environment" cluster \n')),(0,r.kt)("p",null,"With the new CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="shell"',title:'"shell"'},"HTTPS_PROXY=localhost:5000 NEW_CLI=1 monaco deploy -e environments.yaml \n")))}d.isMDXComponent=!0}}]);