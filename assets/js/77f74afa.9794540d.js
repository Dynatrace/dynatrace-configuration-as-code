"use strict";(self.webpackChunkmonaco=self.webpackChunkmonaco||[]).push([[2343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3,title:"Migration of application detection rules"},r=void 0,l={unversionedId:"Guides/app_detection_rules_migration",id:"Guides/app_detection_rules_migration",title:"Migration of application detection rules",description:"An internal change in how Dynatrace stores application detection rule configurations from version 1.252 upwards",source:"@site/docs/Guides/app_detection_rules_migration.md",sourceDirName:"Guides",slug:"/Guides/app_detection_rules_migration",permalink:"/dynatrace-configuration-as-code/next/Guides/app_detection_rules_migration",draft:!1,editUrl:"https://github.com/dynatrace/dynatrace-configuration-as-code/edit/main/documentation/docs/Guides/app_detection_rules_migration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Migration of application detection rules"},sidebar:"tutorialSidebar",previous:{title:"Migrating deprecated configuration types",permalink:"/dynatrace-configuration-as-code/next/Guides/deprecated_migration"},next:{title:"How to ensure ordering of application detection rules via monaco",permalink:"/dynatrace-configuration-as-code/next/Guides/ordering_app_detection_rules"}},c={},s=[{value:"The issue",id:"the-issue",level:2},{value:"Solutions",id:"solutions",level:2},{value:"Easy but with possible monitoring impact",id:"easy-but-with-possible-monitoring-impact",level:3},{value:"Safe but requires manual validating and use of the API",id:"safe-but-requires-manual-validating-and-use-of-the-api",level:3}],u={toc:s};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An internal change in how Dynatrace stores application detection rule configurations from version 1.252 upwards\ncan result in issues with existing monitoring as code configuration."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As a positive effect of this change, there is no need to use app-detection-rule-v2 as of 1.252 upwards, as the API no longer requires ",(0,i.kt)("a",{parentName:"strong",href:"/dynatrace-configuration-as-code/next/configuration/special_config_types#non-unique-name"},"special handling"),".")),(0,i.kt)("p",null,"This Guide describes the manual steps required to work around this."),(0,i.kt)("h2",{id:"the-issue"},"The issue"),(0,i.kt)("p",null,"While monaco uses the 'name' of a configuration to identify it, an internal migration results in all existing\napp-detection-rule being renamed. This results in the first monitoring config deployment creating a new, duplicate configuration."),(0,i.kt)("p",null,"To check if you're facing this issue, look at the Application Detection rules in the Dynatrace UI or call the API directly."),(0,i.kt)("p",null,"As a sample, let's assume there is a single app-detection-rule defined via monaco as:"),(0,i.kt)("p",null,"YAML Config: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'config:\n    - detection_rule: "det.json"\n\ndetection_rule:\n    - name: "TEST RULE"\n    - application_id: "some-project/application-web/my-app.id"\n')),(0,i.kt)("p",null,"JSON Template: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "{{ .name }}",\n    "applicationIdentifier": "{{ .application_id }}",\n    "filterConfig": {\n        "applicationMatchTarget": "DOMAIN",\n        "applicationMatchType": "MATCHES",\n        "pattern": "google.com"\n    }\n}\n')),(0,i.kt)("p",null,"Looking into the Settings UI, where you would expect a single rule, you will see a duplicate after a monitoring config deployment: "),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3166).Z,width:"1547",height:"740"})),(0,i.kt)("p",null,"A GET request to the API will have a result looking something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X GET "{YOUR ENVIRONMENT_URL}/api/config/v1/applicationDetectionRules" -H  "accept: application/json; charset=utf-8" -H  "Authorization: Api-Token {YOUR API TOKEN}"\n[...]\n{\n  "values": [\n    {\n      "id": "e3348565-01b0-35a3-aae0-8957d5f6c1f2",\n      "name": "TEST RULE"\n    },\n    {\n      "id": "a8835418-c7b3-304d-a9f5-6cc08e8935f0",\n      "name": "a8835418-c7b3-304d-a9f5-6cc08e8935f0"\n    }\n  ]\n}\n')),(0,i.kt)("p",null,'As you can see, one of these rules has the expected "TEST RULE" name, while the other has a name matching its ID.'),(0,i.kt)("p",null,"Subsequent monitoring config deployments will update the correctly named rule but leave a duplicate of the original rule."),(0,i.kt)("h2",{id:"solutions"},"Solutions"),(0,i.kt)("p",null,"There are two ways to resolve the duplicated rules."),(0,i.kt)("h3",{id:"easy-but-with-possible-monitoring-impact"},"Easy but with possible monitoring impact"),(0,i.kt)("p",null,"If you can accept a short timeframe in which there are no application detection rules in place, you can:\n1) Delete all duplicate rules from the 'Application detection' Settings page (or via API)\n2) Run monaco deploy to re-create the rules"),(0,i.kt)("h3",{id:"safe-but-requires-manual-validating-and-use-of-the-api"},"Safe but requires manual validating and use of the API"),(0,i.kt)("p",null,"If it is not acceptable to have any timeframe without application detection rules in place, you can:\n1) Run monaco deploy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This will result in duplicated rules  as described above, or might already be the case"),(0,i.kt)("li",{parentName:"ul"},"Once duplicate rules exist, you can delete the migrated rule (where ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," are the same) while the correctly named rule stays in place and active\n2) Query the API to get all rules",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X GET "{YOUR ENVIRONMENT_URL}/api/config/v1/applicationDetectionRules" -H  "accept: application/json; charset=utf-8" -H  "Authorization: Api-Token {YOUR API TOKEN}"\n')),"3) ",(0,i.kt)("strong",{parentName:"li"},"If not all of your rules are defined via monitoring configuration as code, check the content of each configuration to identify the duplicates"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X GET "{YOUR ENVIRONMENT_URL}/api/config/v1/applicationDetectionRules/{A RULE ID}" -H  "accept: application/json; charset=utf-8" -H  "Authorization: Api-Token {YOUR API TOKEN}"\n'))),(0,i.kt)("li",{parentName:"ul"},"If the content matches one of your rules defined using monaco you can delete it as described below, or else leave it untouched."),(0,i.kt)("li",{parentName:"ul"},"If all your rules are defined using monaco, you can delete all migrated rules (where ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," are the same)\n4) Delete the migrated duplicate using the API",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X DELETE "{YOUR ENVIRONMENT_URL}/api/config/v1/applicationDetectionRules/{A RULE ID}" -H  "accept: application/json; charset=utf-8" -H  "Authorization: Api-Token {YOUR API TOKEN}"\n')))))}p.isMDXComponent=!0},3166:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/app_detection_rules_migration_ui_duplicates-065f177ca69662c33bfd1a8a2f23116f.png"}}]);