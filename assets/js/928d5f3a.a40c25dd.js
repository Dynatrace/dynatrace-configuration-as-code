"use strict";(self.webpackChunkmonaco=self.webpackChunkmonaco||[]).push([[978],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return t?a.createElement(f,r(r({ref:n},d),{},{components:t})):a.createElement(f,r({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1,title:"Add a new API"},r=void 0,l={unversionedId:"Guides/add_new_api",id:"Guides/add_new_api",title:"Add a new API",description:"This guide shows you how to add a new API to Monaco that is not included in the table of supported APIs and how to determine whether an API is easy to add.",source:"@site/docs/Guides/add_new_api.md",sourceDirName:"Guides",slug:"/Guides/add_new_api",permalink:"/dynatrace-monitoring-as-code/next/Guides/add_new_api",draft:!1,editUrl:"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code/edit/main/documentation/docs/Guides/add_new_api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Add a new API"},sidebar:"tutorialSidebar",previous:{title:"Special Types of Configuration",permalink:"/dynatrace-monitoring-as-code/next/configuration/special_config_types"},next:{title:"Migrating deprecated configuration types",permalink:"/dynatrace-monitoring-as-code/next/Guides/deprecated_migration"}},s={},p=[{value:"Determine if an API is easy to add",id:"determine-if-an-api-is-easy-to-add",level:2},{value:"Recognize if an API is of single configuration format",id:"recognize-if-an-api-is-of-single-configuration-format",level:2},{value:"Add a new API to Monaco",id:"add-a-new-api-to-monaco",level:2},{value:"Deprecating configuration types",id:"deprecating-configuration-types",level:2},{value:"When and when not to deprecate?",id:"when-and-when-not-to-deprecate",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide shows you how to add a new API to Monaco that is not included in the ",(0,o.kt)("a",{parentName:"p",href:"/dynatrace-monitoring-as-code/next/configuration/configTypes_tokenPermissions"},"table of supported APIs")," and how to determine whether an API is easy to add."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Adding APIs to Monaco is straightforward in most cases. However, some APIs require more coding.")),(0,o.kt)("h2",{id:"determine-if-an-api-is-easy-to-add"},"Determine if an API is easy to add"),(0,o.kt)("p",null,"Easy-to-add APIs fulfill the following criteria: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configuration APIs that implement the following HTTP methods: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GET <my-environment>/api/config/v1/<my-config>")," (get all configs)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GET <my-environment>/api/config/v1/<my-config>/<id>")," (get a single config)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"POST <my-environment>/api/config/v1/<my-config>")," (create a new config)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PUT <my-environment>/api/config/v1/<my-config>/<id>")," (change an existing config)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DELETE <my-environment>/api/config/v1/<my-config>/<id>")," (delete a config)")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The model of the configuration has a ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," property: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "id": "acbed0c4-4ef1-4303-991f-102510a69322",\n      "name: "my-name"\n      ...\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"GET (all)")," REST call return ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "values": [\n      {\n        "id": "string",\n        "name": "string"\n      }\n    ]\n}\n')),(0,o.kt)("p",null,"If your API fulfills these 3 criteria, perform the steps in the following section to add it to Monaco."),(0,o.kt)("h2",{id:"recognize-if-an-api-is-of-single-configuration-format"},"Recognize if an API is of single configuration format"),(0,o.kt)("p",null,"In addition to ",(0,o.kt)("em",{parentName:"p"},"easy-to-add")," APIs, there are such APIs that comply to a ",(0,o.kt)("em",{parentName:"p"},"single configuration")," format:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"They implement the following HTTP methods. E.g. for configuration APIs that is: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GET <my-environment>/api/config/v1/<my-config>")," (get the config)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PUT <my-environment>/api/config/v1/<my-config>")," (change the config)")))),(0,o.kt)("p",null,"Opposed to standard APIs that allow configuring multiple entities, these APIs manage a single, global configuration (within one environment). Therefore, only a single GET and PUT endpoint exists but no endpoints that would allow managing sub-resources (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"../<my-config>/<id>"),")."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f If your API does not fulfil any of the ",(0,o.kt)("em",{parentName:"p"},"easy-to-add")," or ",(0,o.kt)("em",{parentName:"p"},"single configuration")," requirements, please open a ticket in Monaco's backlog\nto get implementation feedback from the maintainers.")),(0,o.kt)("h2",{id:"add-a-new-api-to-monaco"},"Add a new API to Monaco"),(0,o.kt)("p",null,"Take the following steps to add a new API to Monaco."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open your preferred CLI and enter the following code to add your API to ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code/blob/main/pkg/api/api.go#L25"},"the map in api.go")," and replace the placeholder values as described below. ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  "<my-api-folder-name>": {\n      apiPath: "<path-to-my-api>",                             // mandatory\n      isSingleConfigurationApi: <is-single-configuration-api>, // only necessary if API is of single configuration format\n      isNonUniqueNameApi: <is-non-unique-name-api>,            // only necessary if API doesn\'t have unique name attribute\n      propertyNameOfGetAllResponse: "<property-name>",         // only necessary if API returns no "values" envelope (see below)\n  },\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Placeholder"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("nobr",null,(0,o.kt)("inlineCode",{parentName:"td"},"<my-api-folder-name>"))),(0,o.kt)("td",{parentName:"tr",align:null},"The name of the API, also used for the folder name for the configurations. Please take a look at the existing API names to get a feeling for the naming conventions and choose one accordingly.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("nobr",null,(0,o.kt)("inlineCode",{parentName:"td"},"<path-to-my-api>"))),(0,o.kt)("td",{parentName:"tr",align:null},"This path points to your API. Monaco prefixes it with the environment URL to access the configs of your API.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("nobr",null,(0,o.kt)("inlineCode",{parentName:"td"},"<is-single-configuration-api>"))),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean value specifying if an API is of single configuration format (optional, default: ",(0,o.kt)("em",{parentName:"td"},"false"),").")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("nobr",null,(0,o.kt)("inlineCode",{parentName:"td"},"<is-non-unique-name-api>"))),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean value specifying if an API doesn't have a unique name attribute (optional, default: ",(0,o.kt)("em",{parentName:"td"},"false"),").")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("nobr",null,(0,o.kt)("inlineCode",{parentName:"td"},"<property-name>"))),(0,o.kt)("td",{parentName:"tr",align:null},"This names the json property used in the ",(0,o.kt)("inlineCode",{parentName:"td"},"GET ALL")," REST call to return the list of configs. E.g. it would be ",(0,o.kt)("inlineCode",{parentName:"td"},"extensions"),", if the response of your API's ",(0,o.kt)("inlineCode",{parentName:"td"},"GET ALL")," REST call looks like the snippet below")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "extensions": [\n        {\n          "id": "custom.python.connectionpool",\n          "name": "Connection Pool",\n          "type": "ONEAGENT"\n        }\n      ],\n        "totalResults": 9,\n        "nextPageToken": "LlUdYmu5S2MfX/ppfCInR9M="\n      }\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Add a sample config for the integration tests in ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code/tree/main/cmd/monaco/test-resources/integration-all-configs"},"cmd/monaco/test-resources/integration-all-configs"))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Add your API to the ",(0,o.kt)("a",{parentName:"li",href:"/dynatrace-monitoring-as-code/next/configuration/configTypes_tokenPermissions"},"table of supported APIs"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\ude80 After performing these steps, please create the pull request in the upstream repository to share it with the community!")),(0,o.kt)("h2",{id:"deprecating-configuration-types"},"Deprecating configuration types"),(0,o.kt)("p",null,"Sometimes it's necessary to deprecate certain configuration types. This could have several reasons such as the DT API being deprecated or breaking functional changes (e.g. ",(0,o.kt)("em",{parentName:"p"},"dashboard-v2")," resolves name uniqueness challenges of the ",(0,o.kt)("em",{parentName:"p"},"dashboard")," configuration type)."),(0,o.kt)("p",null,"As a best practise, such configurations are kept in the format: ",(0,o.kt)("inlineCode",{parentName:"p"},"<deprecated-configuration>-v<version increment>")," (e.g. ",(0,o.kt)("em",{parentName:"p"},"dashboard-v2"),")."),(0,o.kt)("p",null,"In addition, deprecated configs can be flagged as such by specifying ",(0,o.kt)("em",{parentName:"p"},"isDeprecatedBy"),", e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"<my-deprecated-api-folder-name>": {\n    apiPath: "<path-to-my-api>",               // mandatory\n    isDeprecatedBy: "<my-new-api-folder-name>" // only necessary if API is deprecated\n},\n')),(0,o.kt)("p",null,"Deprecated APIs are handled differently. For example, they are not downloaded anymore (unless explicitly specified by providing the ",(0,o.kt)("em",{parentName:"p"},"--downloadSpecificAPI")," flag). During deployment a warning message is shown, however resources are still deployed."),(0,o.kt)("h3",{id:"when-and-when-not-to-deprecate"},"When and when not to deprecate?"),(0,o.kt)("p",null,"As a rule of thumb, the same configuration types shall be re-used when e.g. new features are added. However, if a feature breaks functionality of an existing configuration type it is usually better to create a new vesion increment and deprecate the previously existing one."),(0,o.kt)("p",null,"For example, more info about the ",(0,o.kt)("em",{parentName:"p"},"dashboard"),", ",(0,o.kt)("em",{parentName:"p"},"request-naming-service"),", ",(0,o.kt)("em",{parentName:"p"},"app-detection-rule")," deprecation can be found ",(0,o.kt)("a",{parentName:"p",href:"/dynatrace-monitoring-as-code/next/Guides/deprecated_migration"},"here"),"."))}c.isMDXComponent=!0}}]);